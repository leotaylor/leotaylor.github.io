{
    "blogs":[
        {
            "id": "blog1",
            "title": "And, so it begins.",
            "date": "02/27/2018",
            "post": "Having never experimented with the tools necessary for the creation of website, I felt completely overwhelmed learning about HTML and CSS as well as using the terminal and GitHub. However, I have to come to realize how necessary and useful these tools can be. I am certainly looking forward to having a better understanding of how to use these tools and create beautiful websites in the process.Throughout the tree house courses and the first couple of weeks of class, I have found HTML to be the least intimidating and easiest to learn. I feel like once you know the basic functioning of the language, then it becomes fairly intuitive. I like the way it interacts with CSS by way of setting classes and ids. However, I am still struggling to learn the difference between the two and how to create highest priority for certain elements. <br> <br> Overall, I find that CSS is very cool and versatile, but difficult to use. There are so many commands that do so many different things that is hard to remember what to use when and how to get certain commands to work correctly, such as floats. Setting colors, text size, and column/container widths to be fairly easy. However, when working with columns I have a hard time getting things positioned just right, especially once I start resizing the screen. I hope to get better at this as time goes on. I remember going over flexbox and bootstrap during the treehouse courses and thinking that those tools made styling much easier. I look forward to learning more about these tools in the class. <br> <br> And then there is GitHub and using the terminal in general. I found that I actually caught on to using the terminal pretty quick although I frequently make mistakes. The most common of which is not moving into the directory folder I had just created when trying to create files. GitHub, doesn’t make sense yet. I know how to make new repositories and branches. However, I have no idea what is actually going on. But, it is clear to me how useful it can be, especially when working on a team or updating a live website. However, I find that when making a website from scratch, it adds unnecessary steps while the site is not yet live. <br><br> For the most part, I am excited about learning how to use these tools further and having them be a part of my daily professional career. The learning curve has been difficult at times and I’m sure nothing is getting any easier. But I welcome the challenge as I know it is going to allow me to acquire a fulfilling career. I just wish I had applied for Nashville Software School sooner!"
        },
        {
            "id": "blog2",
            "title": "Soon I will like JavaScript",
            "date": "03/06/2018",
            "post": "Never has crying in the shower felt more like an option than when we began to study JavaScript in class. I was hoping I would have retained more from Treehouse, but I was in such a rush to get through all of the Treehouse content that I didn’t get a good understanding of some of the concepts. I regret that I didn’t have time to get to the book “A Smarter Way to Learn HTML and CSS” by Mark Myers before class began. However, once we jumped into the deep pool that is JavaScript I pulled out that book and found it to be a valuable resource. Additionally, after playing with the challenges on my own and with my group, I have finally found myself starting to catch on to the basic concepts. I think working in a group of students as hopelessly lost as myself, combined with the non stop dreams/nightmares at night that revolve around JavaScript has aided the most in helping me become more comfortable with the language.<br><br> I originally had a very hard time with the arrays challenges and the objects challenges. However, it turns out that the function challenges is where it started coming together for me. Functions make sense! After beginning to work on the function challenges, I have been able to apply what I have been learning through functions and apply that to arrays and objects. I am currently clinging on to for loops and other elementary basics of JavaScript while keeping array methods in sight. I have been reading about the array methods on Mozilla Developer Network but it is almost too technical for me at the moment. Instead, I have been going to YouTube and searching for videos that describe how this array methods work. This has been crucial for me in regards to understanding how to use these methods.<br> <br> While working on the challenges, Google has been my friend. So much so, that I find myself having to close several windows upon finishing the challenges. The challenges have made me feel all of the emotions, but ultimately are helping me figure out how to work with JavaScript. I have a long way to go before I am fluent in JavaScript but at least now it seems possible. I know that I have a lot of frustration waiting for me every time I open my laptop to tackle a new problem, but I just have to continue to remind myself that it will be worth it once I have acquired these in-demand skills.<br> <br> One of the areas of JavaScript where I still fill the most confusion is the difference between strings, arrays, and objects and how to interact with them. It seems certain functions or methods may work on one, but behave differently with another. At the moment, there is nothing I want more than to fully fluent in JavaScript and understand exactly how it works, but I realize it will take time and hard work and while my time is extremely limited, I have an infinite supply of hard work."
        },
        {
            "id": "blog3",
            "title": "Advanced JavaScript",
            "date": "03/10/2018",
            "post": "Now, that I am getting the basics of JavaScript under my belt, I am incredibly intrigued with the advanced array methods. They are such useful tools, if you know how to use them. I have been working on learning one at time. The only problem is whenever I learn one, I try to use it for everything. I remember trying to use the slice method on almost every one of my homework assignments. I think I was successful using it on only one however. It is a little difficult remembering what parameters and values are required for the advanced array methods, and it is still frustrating when something doesn’t work the way I expect it to. But, as I continue to get experience with these methods and JavaScript in general, I know that I will become more comfortable and capable of working with it. <br> <br> It was really cool learning how GitHub works. It seems very user friendly, at least once you know how to use it. GitHub seems like the perfect interface for a design team to work within. Creating a project and the associated tickets was very simple. In general, I enjoy working in a team. The only aspect that seems particularly tricky about working on a design team is dealing with multiple people pushing branches up to GitHub. It seems like there is a lot of room for error in regards to resolving conflicts and my greatest fear is accidentally deleting someone else’s work while attempting to merge branches or even reviewing someone’s branch contribution. As I get some experience with this, then I’m sure the fears will rescind. <br> <br> One thing that really seems to resonate with me was group planning for a project. I enjoyed the process of planning out the fine details on paper and then hashing it out a little further as we began writing tickets. During my first experience with this process, I was fortunate enough to be the team lead. Having come from a management background and having completed many masters level management courses, this position felt very natural and rewarding. While I feel very comfortable with my team lead skills, I can’t wait to feel the same level of comfort with my programming skills."
        },
        {
            "id": "blog4",
            "title": "ES6, Event-listeners, and more...",
            "date": "03/21/2018",
            "post": "Learning ES6 at first glance seems somewhat complicated, but once I started to really get into, I realized that it does a good job making things simpler and more intuitive. I was fortunate enough to find some time to read the “ you don’t know js” chapters 1 and 2 the night before class and that really helped a lot in my comprehending of the material. I really like the concept of const and let. I view const as the constant, unchanging variable and let is a variable that can be reassigned. <br><br> I began researching when one should consider using var versus let and const. I found that it all has to do with the lexical scope. The way it appears to me is that let has block scope. This means that a variable declared with let only exists within the loop/if statements it was declared in. Var tends to only respect scope in relation to a function. The” you don’t know js” book had a good example of lexical scope. If you have nested scopes, such as loops within a function or function within a function or loop within a loop. Then the innermost scope has access to the variable declared outside of it. However, if a variable is declared within the innermost scope, then the outer scopes do not have access to this information. <br><br> It has been a relief to officially be taught event-listeners. I would love to have assignments that just cause me to continuously go over the event-listeners methods over and over until they are permanently burned into my brain. In fact, I feel that way about most of the JS content. I’m looking forward to the next project, (the travel diary). I feel like that is another great opportunity to get some practice in with event-listeners. Event-listeners seem to be one of the most important tools in JS. The more practice with them, the better. <br><br> As time goes by, I am finding myself getting more and more comfortable with JS. I mean, I still feel like pulling my hair our every time I work on it. But, the bald patches are healing, and the occurrence of missing hair is becoming less frequent. I feel that as long as I can continue to get lots of repetitive practice in with JS, the more I will begin to understand how to really do some cool things with it."
        },
        {
            "id": "blog5",
            "title": "XHR",
            "date": "4/4/2018",
            "post": "Extensive Markup Language (XML) HttpRequest or XHR is a way of accessing data from the web or a database and pulling it into your JS code. It requires a constructor that must be called before any other method is called. It can be called upon page load or after a specified event. The constructor is XMLHttpRequest(). I discovered while playing around on my solar system project that one can set a parameter in the parenthesis and pass a function into it so that one can call a new XML request when that particular function runs.<br><br>In our class projects we have been pulling data from .json objects. During this process I learned that the json file can be a live database that can be updated by users. This allows the user to make changes and see the result from those changes immediately as long as the JS is setup properly to manage that. At the moment I am fairly comfortable with the process of making simple XML requests, but like everything with JS I’m sure it has the potential to become complicated and upon inspection of MDN, I have found that the XMLHttpRequest can accept several different properties in methods that change how they or the interface behave. So, yes it get more complicated. My current problem with it is just knowing when to call an additional request if one is required on a project.<br><br> In general, XHR is a really useful and “cool” tool for creating interactive websites that deal with any amount of data."
        },
        {
            "id": "blog6",
            "title": "Bootstrap",
            "date": "4/9/2018",
            "post": "Working with Bootstrap provides both new challenges, as well as makes some aspects of coding much easier. For me, the primary benefit of Bootstrap is the grid layout. It allows for elements to be laid out in a clean and equally spaced manner. It takes a little getting used to, but overall I find it preferable to FlexBox, or manually trying to set margins that are responsive. I’m looking forward to diving deeper into Bootstrap, but so far I like it a lot. I feel that it takes a little of competitive edge away as I’ve developed a reputation for being good at CSS. My current plan is to update my personal site with the bootstrap grid system. I haven’t build cards with bootstrap, but I feel like it could be more enjoyable than working with FlexBox....maybe.<br><br>I’m looking forward to experimenting with some of Bootstraps JS methods. I am starting to catch on to JS and even enjoy it, but I’d like to see what I can do when I combine bootstrap with it.<br><br>Other than the grid system, I have used forms and buttons from bootstrap; both of which I find preferable to what I have been creating with HTML and CSS, and it is so easy too. I keep finding myself both mildly frustrated and amazed by bootstrap. The one thing that is causing me some frustration is the unexpected consequences when you try to override certain bootstrap properties with CSS. But the amazement comes from how is it is to manipulate the page just with simple class names. It is fun."
        },
        {
            "id": "blog7",
            "title": "Grunt and Browserify",
            "date": "4/25/2018",
            "post": "The addition of Browserify, eslint, and Grunt has been both helpful and frustrating. Unlike most of the class, I really like Grunt and eslint. Grunt has been incredibly helpful in maintaining good-looking code that meets the typically accepted practices. It has also been useful in avoiding mistakes in my code, which makes problem solving more efficient when something is not properly working in my code. I am very thankful to have Grunt in place as we take on Browserify. I couldn’t imagine trying to pass my functions and data through all of my Javascript files without it. I know I would have so many unexplained dead-ends without Grunt keeping me in check, and probably not understanding why nothing was working. <br><br> Browserify definitely takes some getting used to. While my comfort level was writing all of my Javascript in one file, I do understand the reason for Browserify. It helps keep my js organized and minimizes the unexpected affects some functions or variables may have on one another. However, it gets fairly confusing in my opinion. I am sure it will just REQUIRE a little more practice, and as I have been working with it, it is definitely starting to make a little more sense. Like many of the tools and methods we have been learning in class, Browserify and Grunt have started out as frustrating, but are sure to become more valuable every time I work with it. "
        },
        {
            "id": "blog8",
            "title": "Grunt and Browserify... continued",
            "date": "5/2/2018",
            "post": "After finishing up a few projects using taskrunners (grunt) and browserify, I can reassert that I truly appreciate taskrunners, but am still somewhat skeptical of browserify. Grunt is awesome at keeping my code in check and ensuring that everything is looking good. Browserify, while great for keeping things organized, still takes some getting used to, especially when trying to avoid circular dependencies. I suspect this will be less of an issue once we get into Jquery, but for now passing data around, while not too difficult, still seems kind of like a pain in the butt. The more I use it though, the easier it gets. "
        },
        {
            "id": "blog9",
            "title": "Chatty",
            "date": "5/7/2018",
            "post": "Working on a team to create the Chatty site was a great learning experience. I was fortunate to be on a team that highly valued the planning phase of the project. We spent 2 full group sessions planning, and didn’t start coding until day 3. This helped coding go much more smoothly in so many ways. Since we all planned together, we were able to more efficiently help one another with problem areas. Once we were done planning we agreed to split up cards by assigning ourselves to the cards we wanted. This was both good and bad. Most of the cards I wanted to try were already claimed before I had a chance to get to them, so I ended up doing cards that I already had a strong understanding of how to do. As a result I finished mine first, but was able to ask other team members if I could work on their cards with them. Unfortunately, we had some team members who would start working on tickets regardless of whose name was on it, and failed to communicate that they were doing so. For example, I had the ticket for message limit. I was waiting for a team member to finish the ‘add to array card’ so that I had something to work with. Unfortunately, while I was finished up another card, a different team member swooped in and did the message limit without communicating or letting any of us know. He did a good job with it, so I wasn’t too upset, but it was a little rude. I feel like I got stuck with all of the easier cards, and thus didn’t get a chance to learn as much as I could have from the project. However, I still made meaningful contributions and am overall happy with the group and the way the project turned out. <br><br> I find that the group projects have been the most beneficial, however I feel like that has a lot to do with who you end up with. As I stated before, I was fortunate to be on a team that valued planning. I have been on teams in the past that wanted to get straight to coding, and it’s usually a mess for those of us who are not as strong as those who are more at the head of the class. "
        },
        {
            "id": "blog10",
            "title": "jQuery",
            "date": "5/14/2018",
            "post": "The addition of jQuery to my web-development toolbox has proven to be a major aid in my JavaScript journey. I’m happy that I have learned how to code without, but I’m very relieved to have such a powerful and easy-to-use way to work with JavaScript. I am really excited about the idea of learning more about jQuery in class, as it has made many aspects of JavaScript easier to handle. I would love to see some more exercises geared toward learning jQuery. <br><br>I find jQuery particularly useful in being able to grab dom elements, and style those elements. It has also made it easier to access JSON data. Adding event listeners is generally easier with jQuery, especially if the event is based on a button click. It gets slightly more complicated when wanting to click on a particular div, but in general it is still not too difficult. I have enjoyed playing around with .html(), .text(), and .val() as a way of accessing the data contained within an element."
        },
        {
            "id": "blog11",
            "title": "Promises, I want to love you.",
            "date": "5/20/2018",
            "post": "So, promises are meant to be a way of managing asynchronous operations. When using a promise it will go through 2 of 3 different states; pending and resolved or rejected. Promises typically return some data and THEN does something with that data using the .then() method. <br><br> This is my current understanding of promises. This seems to make sense, it really seems simple. Yet, the confusion is abundant. We are currently learning how to write promises and are getting used to the syntax and how they function. But at the moment, I have not been able to put two and two together in regards to what I understand they are used for and how we have used them so far in class. I imagine that is fine for the time being, as we are taking baby steps toward understanding promises. I look forward to getting a better understanding of the value and use of promises soon, but at the same time dread it. While it seems simple, it feels complicated. But I am hoping that is a temporary feeling. <br><br> I am still a little confused about when to use the chain method versus promise.all, and even if/when I should use the “pyramid of doom.” While I have successfully used both methods in recent assignments, I don’t fully understand what is happening within the function. Promises, I really want to love you. "
        },
        {
            "id": "blog12",
            "title": "API's",
            "date": "5/28/2018",
            "post": "Working with API’s, so far, has been pretty simple and straightforward. However, from what I can tell all web api’s are not created equal and as a result requires the reading of documentation in order to ensure everything works the way you expect. Even then, I’m sure there are be surprises. <br><br> It is a little stressful at first thinking about keeping the API key hidden because of the possible security implications associated with having your API visible. Fortunately, keeping it hidden has proven to not be difficult. <br><br> The only problem I had with the first API assignment (local weather) was how to only print the 5 day forecast instead of every three hours. But even that solution was simple once I got to writing the domstring and used a for loop to get one out of every 8 results. <br><br> I am sure working with API’s can and will get more complicated and I look forward to learning about that. I am also looking forward to writing my own API."
        },
        {
            "id": "blog13",
            "title": "Firebase",
            "date": "6/2/2018",
            "post": "I am excited that we are getting a glimpse into the realm of back end technologies. Firebase seems like an easy to use, accessible first step into dealing with the backend. It is like an API, server, and database all rolled into one easy to use and free service. I haven’t gotten to deep into the nuts and bolts of firebase, but so far I like it. Firebase has also provided us good practice using CRUD. Create, Read, Update, Delete. There is a lot of code and promises that go into crud, and I hope we use it a lot so that I can get more accustomed to going through the steps of crud as well as working with Firebase. <br><br> My one concern with firebase is that we were told that we were using it in a way that most people never would. That is concerning to me as far as using it for real world applications. However, I am confident that there is good logic behind the decision to use Firebase the way we currently are. But I hope we can get a good idea of how it is commonly used in the work environment. "
        },
        {
            "id": "blog14",
            "title": "Firebase Auth",
            "date": "6/11/2018",
            "post": "Setting up an authorization feature through firebase was a lot more simple than I had imagined. The important firebase methods to use within the Javascript files are firebase.auth().createUserWithEmailAndPassword(email, password), firebase.auth().signInWithEmailAndPassword(email, password), fireabase.auth().signout(), firebase.auth().onAuthStateChanged(user). <br><br> These allow the user to create and account, signing with the account, signout, and the last keeps track of whether or not a user is signed in or not and can use an if else statement to tell the browser what to do depending on if a user is logged in or not. <br><br> In addition to using these methods, one needs to make an account on firebase and link it to the project so that a realtime database can be created and used alongside with the website. Firebase at first glance felt a little overwhelming, but once we got into it, it turned out to be pretty simple and easy to work with. I’m glad that we will continue working with firebase on future projects so that I can continue learning how to work with firebase while also keeping up and reinforcing what I have learned so far through repetition. "
        },
        {
            "id": "blog15",
            "title": "Sass",
            "date": "7/2/2018",
            "post": "Sass is a truly awesome addition to CSS styling. It introduces some great tools that make writing CSS even more enjoyable and easier than it already was. Some of the most useful Sass features are variables, mixins, and extend. <br><br> I love the use of variables. You can set any sort of color, effect, or font you like to a variable and then freely use it throughout the stylesheets in order to maintain a consistent look throughout your project with less hassle. In some cases, one my be using partials. If so, one can easily import the variable file into the partial. <br><br> Two similar, but useful features are mixins and extend. Instead of writing the same code over and over, one can just write it once using the keyword @mixin. When one wants to use the mixin’s properties, then all one has to do is use the keyword @include to call the previously written mixin. <br><br> If you have some elements that share most of the same styling, but you need to change a few things about it such as giving the element a different color, then @extend is really useful. For the new element, you can just write @extend and call the previously written style and then add whatever changes you need to make to update the new element. <br><br> In addition to these great features, Sass allows for the use of functions that can, for example, be used to lighten or darken a particular color. If I have a color that I like but want I want to darken it by 20%, I can do it like this. darken($myColor, 20%). I definitely plan on using Sass more often now that I have learned how to use it. "
        }
    ]
}
